// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the lower 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
   	
   	/*
   	* out1 comes from RAM16K for Memory
   	* out2 comes from RAM8K for Screen
   	* out3 comes form RAM.. for Keyboard
   	*/ 


   	/* if (address[0] is set)
   	* then screen or keyboard
   	*/ 

   	Not(in = address[14], out = ltemp); 
   	And(a = ltemp, b = load, out = load1); 
    RAM16K(in = in, load = load1, address = address[0..13], out = out1); 

    /* ----------------------------------------------------------- */ 
    /* Screen */ 
    
    
    /* RAM 8K */ 
    /* for RAM8K to be activated and not the keyboard, we should have: 
    * address[14] = 1
    * address[13] = 0
    * address[12] = 0|1 		(this decides which of the RAM4K is picked)
    */
    Not(in = address[13], out = ll2);			      // NOT address[13] 
    And(a = ll2, b = address[14], out = l2);    // NOT13 AND addr14
    And(a = l2, b = load, out = load2); 		    // prev AND load
    
    RAM8K(in = in, load = load2, address = address[0..12], out = out2); 


    /* ----------------------------------------------------------- */ 
    /* Keyboard */ 
    Keyboard(out = out3); 

    Mux4Way16(a = out1, b = out1, c = out2, d = out3, 
    	sel = address[13..14], out = out); 

}